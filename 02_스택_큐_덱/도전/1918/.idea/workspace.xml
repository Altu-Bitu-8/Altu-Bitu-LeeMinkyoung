<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="CMakePresetLoader">{
  &quot;useNewFormat&quot;: true
}</component>
  <component name="CMakeReloadState">
    <option name="reloaded" value="true" />
  </component>
  <component name="CMakeRunConfigurationManager">
    <generated />
  </component>
  <component name="CMakeSettings">
    <configurations>
      <configuration PROFILE_NAME="Debug" ENABLED="true" CONFIG_NAME="Debug" />
    </configurations>
  </component>
  <component name="ChangeListManager">
    <list default="true" id="d8ffc0a5-9f42-4bac-a4e3-a30528e93d3f" name="Changes" comment="">
      <change beforePath="$PROJECT_DIR$/../../필요 없는 파일들 모음 (과제는 도전이랑 필수에 넣었어요!)/CMakeLists copy.txt" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/../../필요 없는 파일들 모음 (과제는 도전이랑 필수에 넣었어요!)/CMakeLists.txt" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/../../필요 없는 파일들 모음 (과제는 도전이랑 필수에 넣었어요!)/cmake-build-debug/.cmake/api/v1/query/cache-v2" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/../../필요 없는 파일들 모음 (과제는 도전이랑 필수에 넣었어요!)/cmake-build-debug/.cmake/api/v1/query/cmakeFiles-v1" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/../../필요 없는 파일들 모음 (과제는 도전이랑 필수에 넣었어요!)/cmake-build-debug/.cmake/api/v1/query/codemodel-v2" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/../../필요 없는 파일들 모음 (과제는 도전이랑 필수에 넣었어요!)/cmake-build-debug/.cmake/api/v1/query/toolchains-v1" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/../../필요 없는 파일들 모음 (과제는 도전이랑 필수에 넣었어요!)/cmake-build-debug/.cmake/api/v1/reply/cache-v2-0c3e2685cd171445008e.json" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/../../필요 없는 파일들 모음 (과제는 도전이랑 필수에 넣었어요!)/cmake-build-debug/.cmake/api/v1/reply/cmakeFiles-v1-c79da4c86b085b789d57.json" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/../../필요 없는 파일들 모음 (과제는 도전이랑 필수에 넣었어요!)/cmake-build-debug/.cmake/api/v1/reply/codemodel-v2-d296ff4a7bbcc05dadda.json" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/../../필요 없는 파일들 모음 (과제는 도전이랑 필수에 넣었어요!)/cmake-build-debug/.cmake/api/v1/reply/directory-.-Debug-f5ebdc15457944623624.json" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/../../필요 없는 파일들 모음 (과제는 도전이랑 필수에 넣었어요!)/cmake-build-debug/.cmake/api/v1/reply/index-2025-02-26T12-00-10-0060.json" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/../../필요 없는 파일들 모음 (과제는 도전이랑 필수에 넣었어요!)/cmake-build-debug/.cmake/api/v1/reply/target-17298-Debug-470ed9cf604f6b083a87.json" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/../../필요 없는 파일들 모음 (과제는 도전이랑 필수에 넣었어요!)/cmake-build-debug/.cmake/api/v1/reply/toolchains-v1-bb57840159693364638b.json" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/../../필요 없는 파일들 모음 (과제는 도전이랑 필수에 넣었어요!)/cmake-build-debug/.ninja_deps" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/../../필요 없는 파일들 모음 (과제는 도전이랑 필수에 넣었어요!)/cmake-build-debug/.ninja_log" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/../../필요 없는 파일들 모음 (과제는 도전이랑 필수에 넣었어요!)/cmake-build-debug/17298" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/../../필요 없는 파일들 모음 (과제는 도전이랑 필수에 넣었어요!)/cmake-build-debug/CMakeCache.txt" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/../../필요 없는 파일들 모음 (과제는 도전이랑 필수에 넣었어요!)/cmake-build-debug/CMakeFiles/17298.dir/main.cpp.o" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/../../필요 없는 파일들 모음 (과제는 도전이랑 필수에 넣었어요!)/cmake-build-debug/CMakeFiles/3.28.1/CMakeCCompiler.cmake" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/../../필요 없는 파일들 모음 (과제는 도전이랑 필수에 넣었어요!)/cmake-build-debug/CMakeFiles/3.28.1/CMakeCXXCompiler.cmake" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/../../필요 없는 파일들 모음 (과제는 도전이랑 필수에 넣었어요!)/cmake-build-debug/CMakeFiles/3.28.1/CMakeDetermineCompilerABI_C.bin" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/../../필요 없는 파일들 모음 (과제는 도전이랑 필수에 넣었어요!)/cmake-build-debug/CMakeFiles/3.28.1/CMakeDetermineCompilerABI_CXX.bin" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/../../필요 없는 파일들 모음 (과제는 도전이랑 필수에 넣었어요!)/cmake-build-debug/CMakeFiles/3.28.1/CMakeSystem.cmake" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/../../필요 없는 파일들 모음 (과제는 도전이랑 필수에 넣었어요!)/cmake-build-debug/CMakeFiles/3.28.1/CompilerIdC/CMakeCCompilerId.c" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/../../필요 없는 파일들 모음 (과제는 도전이랑 필수에 넣었어요!)/cmake-build-debug/CMakeFiles/3.28.1/CompilerIdC/CMakeCCompilerId.o" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/../../필요 없는 파일들 모음 (과제는 도전이랑 필수에 넣었어요!)/cmake-build-debug/CMakeFiles/3.28.1/CompilerIdCXX/CMakeCXXCompilerId.cpp" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/../../필요 없는 파일들 모음 (과제는 도전이랑 필수에 넣었어요!)/cmake-build-debug/CMakeFiles/3.28.1/CompilerIdCXX/CMakeCXXCompilerId.o" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/../../필요 없는 파일들 모음 (과제는 도전이랑 필수에 넣었어요!)/cmake-build-debug/CMakeFiles/CMakeConfigureLog.yaml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/../../필요 없는 파일들 모음 (과제는 도전이랑 필수에 넣었어요!)/cmake-build-debug/CMakeFiles/TargetDirectories.txt" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/../../필요 없는 파일들 모음 (과제는 도전이랑 필수에 넣었어요!)/cmake-build-debug/CMakeFiles/clion-Debug-log.txt" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/../../필요 없는 파일들 모음 (과제는 도전이랑 필수에 넣었어요!)/cmake-build-debug/CMakeFiles/clion-environment.txt" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/../../필요 없는 파일들 모음 (과제는 도전이랑 필수에 넣었어요!)/cmake-build-debug/CMakeFiles/cmake.check_cache" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/../../필요 없는 파일들 모음 (과제는 도전이랑 필수에 넣었어요!)/cmake-build-debug/CMakeFiles/rules.ninja" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/../../필요 없는 파일들 모음 (과제는 도전이랑 필수에 넣었어요!)/cmake-build-debug/Testing/Temporary/LastTest.log" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/../../필요 없는 파일들 모음 (과제는 도전이랑 필수에 넣었어요!)/cmake-build-debug/build.ninja" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/../../필요 없는 파일들 모음 (과제는 도전이랑 필수에 넣었어요!)/cmake-build-debug/cmake_install.cmake" beforeDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="ClangdSettings">
    <option name="formatViaClangd" value="false" />
  </component>
  <component name="ExecutionTargetManager" SELECTED_TARGET="CMakeBuildProfile:Debug" />
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$/../../.." />
  </component>
  <component name="ProjectApplicationVersion">
    <option name="ide" value="CLion" />
    <option name="majorVersion" value="2024" />
    <option name="minorVersion" value="1" />
    <option name="productBranch" value="Classic" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 8
}</component>
  <component name="ProjectId" id="2taCkNPm9KkVSTRZeb6FYZ5glKa" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;RunOnceActivity.RadMigrateCodeStyle&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.cidr.known.project.marker&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.readMode.enableVisualFormatting&quot;: &quot;true&quot;,
    &quot;cf.first.check.clang-format&quot;: &quot;false&quot;,
    &quot;cidr.known.project.marker&quot;: &quot;true&quot;,
    &quot;git-widget-placeholder&quot;: &quot;02-assignment&quot;,
    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
  }
}</component>
  <component name="RunManager">
    <configuration default="true" type="CLionExternalRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" EMULATE_TERMINAL="false" PASS_PARENT_ENVS_2="true">
      <method v="2">
        <option name="CLION.EXTERNAL.BUILD" enabled="true" />
      </method>
    </configuration>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="d8ffc0a5-9f42-4bac-a4e3-a30528e93d3f" name="Changes" comment="" />
      <created>1740580940466</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1740580940466</updated>
      <workItem from="1740580941581" duration="617000" />
    </task>
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="VCPKGProject">
    <isAutomaticCheckingOnLaunch value="false" />
    <isAutomaticFoundErrors value="true" />
    <isAutomaticReloadCMake value="true" />
  </component>
</project>